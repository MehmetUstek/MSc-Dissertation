version: "3.7"
services:
  app:
    build:
      args:
        user: ${DOCKER_USER}
        uid: ${DOCKER_UID}
      context: ./
      dockerfile: Dockerfile
    image: ${DOCKER_IMAGE_NAME}
    environment:
      APP_ENV: local
      CONTAINER_ROLE: app
    links:
      - db
      - redis
    container_name: ${DOCKER_IMAGE_NAME}-app
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
    networks:
      - default
  db:
    image: mysql:5.7
    container_name: ${DOCKER_IMAGE_NAME}-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    ports:
      - ${DOCKER_DB_EXPOSED_PORT}:${DB_PORT}
    volumes:
      - ./docker-compose/mysql:/docker-entrypoint-initdb.d
      - db-data:/var/lib/mysql
    networks:
      - default

  server:
    image: nginx:alpine
    container_name: ${DOCKER_IMAGE_NAME}-server
    links:
      - echo
      - app
    restart: unless-stopped
    ports:
      - ${DOCKER_SERVER_EXPOSED_PORT}:80
      - ${DOCKER_SERVER_SECURE_PORT}:443
    volumes:
      - ./:/var/www
      - ./docker-compose/nginx:/etc/nginx/conf.d/
    networks:
      - default
  queue:
    image: ${DOCKER_IMAGE_NAME}
    container_name: ${DOCKER_IMAGE_NAME}-queue
    restart: unless-stopped
    working_dir: /var/www
    environment:
      APP_ENV: local
      CONTAINER_ROLE: queue
    depends_on:
      - app
    volumes:
      - ./:/var/www
    networks:
      - default
  scheduler:
    image: ${DOCKER_IMAGE_NAME}
    container_name: ${DOCKER_IMAGE_NAME}-scheduler
    restart: always
    working_dir: /var/www
    environment:
      APP_ENV: local
      CONTAINER_ROLE: scheduler
    depends_on:
      - app
    volumes:
      - ./:/var/www
    networks:
      - default
  redis:
    image: "redis:alpine"
    container_name: ${DOCKER_IMAGE_NAME}-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/var/lib/redis
    networks:
      - default
  echo:
    image: ${DOCKER_IMAGE_NAME}
    container_name: ${DOCKER_IMAGE_NAME}-echo
    restart: unless-stopped
    working_dir: /var/www
    environment:
      APP_ENV: local
      CONTAINER_ROLE: echo
    depends_on:
      - app
    volumes:
      - ./:/var/www
    networks:
      - default
volumes:
  db-data:
    external:
      name: ${DOCKER_DB_VOLUME}
  redis-data:
    external:
      name: ${DOCKER_DB_VOLUME}
networks:
  default:
    external:
      name: ${DOCKER_NETWORK_NAME}
