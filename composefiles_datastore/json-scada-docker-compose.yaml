version: '3.8'

# {json:scada} Demo - (c) 2020-2021 - Ricardo L. Olsen 

# ACCESS VIA WEB BROWSER AT http://127.0.0.1:8080
# Grafana access http://127.0.0.1:3000, user=admin password=jsonscada
# Must be online to connect to IEC60870-5-104 live demo server at 207.180.242.96:2404. 

services:

# NO AUTHENTICATION IS PROVIDED HERE FOR MONGODB AND POSTGRESQL!

  # must create a mongodb instance or cluster with a replica set
  jsdemo_mongorsn1:
    image: mongo:7.0
    container_name: jsdemo_mongors1
    hostname: jsdemo_mongorsn1
    restart: unless-stopped
    command: "mongod --bind_ip_all --replSet rs1 --wiredTigerCacheSizeGB 2 --dbpath /data/db --port 27017"    
    extra_hosts:
      - "jsdemo_mongorsn1:127.0.0.1"
    volumes:
      - ./mongors1/files:/files
      - ./mongo_seed/files:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_DATABASE=json_scada
    # to export mongodb port on main host!
    ports:
      - "27017:27017"
    # internal container port
    expose:
      - "27017"
    networks:
      - jsdemo_net
  
  # Postgresql/TimescaleDB historian. Without auth! 
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: jsdemo_timescaledb
    restart: unless-stopped
    command: postgres -c shared_preload_libraries=timescaledb
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      #- POSTGRES_PASSWORD=passw0rd
    volumes:
      - ./postgres_seed:/docker-entrypoint-initdb.d/
      #- ./timescale:/var/lib/postgresql
    # to export postgresql port on main host!
    ports:
      - 5432:5432
    # internal container port
    expose:
      - "5432"
    links:
      - jsdemo_mongorsn1
    networks:
      - jsdemo_net

  # Postgresql/TimescaleDB Process SQL hist files 
  process_pg_hist:
    image: timescale/timescaledb:latest-pg14
    container_name: jsdemo_process_pg_hist
    command: /sql/process_pg_hist.sh
    restart: unless-stopped
    environment:
      - PSQL_PATH=/usr/local/bin
      - PGPORT=5432
      - PGHOST=jsdemo_timescaledb
      - PGDATABASE=json_scada
      - PGUSER=json_scada
      - PGPASSWORD=
    volumes:
      - ./sql:/sql
    links:
      - jsdemo_mongorsn1
      - timescaledb
    networks:
      - jsdemo_net

  # Postgresql/TimescaleDB Process SQL current data files 
  process_pg_rtdata:
    image: timescale/timescaledb:latest-pg14
    container_name: jsdemo_process_pg_rtdata
    command: /sql/process_pg_rtdata.sh
    restart: unless-stopped
    environment:
      - PSQL_PATH=/usr/local/bin
      - PGPORT=5432
      - PGHOST=jsdemo_timescaledb
      - PGDATABASE=json_scada
      - PGUSER=json_scada
      - PGPASSWORD=
    volumes:
      - ./sql:/sql
    links:
      - jsdemo_mongorsn1
      - timescaledb
    networks:
      - jsdemo_net

  grafana:
    image: grafana/grafana:9.5.9
    container_name: jsdemo_grafana
    # you may need to set the docker user:group to be able to write grafana folder 
    # set UID and GID variables 
    # or change default user and  group ids
    #user: "${UID:-1000}:${GID:-1000}"
    restart: unless-stopped
    volumes: 
      - ./grafana_data:/var/lib/grafana
    environment: 
      - GF_SERVER_DOMAIN=127.0.0.1
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:8080/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      # enable auto login of json-scada user with auth.proxy
      - GF_AUTH_PROXY_ENABLED=true
      - GF_AUTH_PROXY_ENABLE_LOGIN_TOKEN=true
      - GF_AUTH_DISABLE_SIGNOUT_MENU=true
      #- GF_AUTH_PROXY_WHITELIST=127.0.0.1
      #- GF_AUTH_PROXY_HEADER_NAME=X-WEBAUTH-USER
      #- GF_AUTH_PROXY_HEADER_PROPERTY=username
      #- GF_AUTH_PROXY_AUTO_SIGN_UP=true      

    # export grafana port to the host
    ports:
      - 3000:3000
    expose:
      - "3000"
    links:
      - timescaledb
    networks:
      - jsdemo_net
  
  # IEC60870-5-104 CLIENT, will connect to a demo server on 207.180.242.96:2404
  iec104client:
    image: mcr.microsoft.com/dotnet/sdk:6.0
    container_name: jsdemo_iec104client
    command: sh -c "sleep 20 && /jsonscada_bin/iec104client"
    restart: unless-stopped
    volumes:
      - ./conf:/conf
      - ./bin:/jsonscada_bin
    links:
      - jsdemo_mongorsn1
    networks:
      - jsdemo_net

  # IEC60870-5-104 SERVER, accepts connection on 127.0.0.1:2404 (originator address 1)
  iec104server:
    image: mcr.microsoft.com/dotnet/sdk:6.0
    container_name:  jsdemo_iec104server
    command: sh -c "sleep 20 && /jsonscada_bin/iec104server"
    restart: unless-stopped
    volumes:
      - ./conf:/conf
      - ./bin:/jsonscada_bin
    links:
      - jsdemo_mongorsn1
    # exports the iec 104 server port to the host
    ports:
      - 2404:2404
    expose:
      - "2404"
    networks:
      - jsdemo_net

  # process incoming data 
  cs_data_processor:
    image: node:20-alpine
    container_name: jsdemo_cs_data_processor
    command:  sh -c "cd /cs_data_processor && sleep 10 && node cs_data_processor.js"
    restart: unless-stopped
    volumes:
      - ../src/cs_data_processor:/cs_data_processor
      - ./sql:/sql
      - ./conf:/conf
    links:
      - jsdemo_mongorsn1
    networks:
      - jsdemo_net

  # custom script processor
  cs_custom_processor:
    image: node:20-alpine
    container_name: jsdemo_cs_custom_processor
    command:  sh -c "cd /cs_custom_processor && sleep 10 && node cs_custom_processor.js"
    restart: unless-stopped
    volumes:
      - ../src/cs_custom_processor:/cs_custom_processor
      - ./conf:/conf
    links:
      - jsdemo_mongorsn1
    networks:
      - jsdemo_net

  # config server for excel
  config_server_excel:
    image: node:20-alpine
    container_name: jsdemo_config_server_excel
    command:  sh -c "cd /config_server_for_excel && sleep 10 && node index.js"
    restart: unless-stopped
    environment:
      - JS_CSEXCEL_IP_BIND=0.0.0.0
      - JS_CSEXCEL_HTTP_PORT=10001
    ports:
      - 10001:10001
    expose:
      - "10001"
    volumes:
      - ../src/config_server_for_excel:/config_server_for_excel
      - ./conf:/conf
    links:
      - jsdemo_mongorsn1
    networks:
      - jsdemo_net

  # mqtt sparkplug-b driver
  mqtt-sparkplug:
    image: node:20-alpine
    container_name: jsdemo_mqtt-sparkplug
    command:  sh -c "cd /mqtt-sparkplug && sleep 20 && node index.js"
    restart: unless-stopped
    volumes:
      - ../src/mqtt-sparkplug:/mqtt-sparkplug
      - ./conf:/conf
    links:
      - jsdemo_mongorsn1
    networks:
      - jsdemo_net


  # OPC-UA Server
  opcua_server:
    image: node:20-alpine
    container_name: jsdemo_opcua_server
    command:  sh -c "cd /OPC-UA-Server && sleep 10 && node index.js"
    restart: unless-stopped
    ports:
      - 4840:4840
    expose:
      - "4840"
    volumes:
      - ../src/OPC-UA-Server:/OPC-UA-Server
      - ./conf:/conf
    links:
      - jsdemo_mongorsn1
    networks:
      - jsdemo_net

  # realtime web server, will listen on some HTTP port NO AUTH/RBAC
  #server_realtime:
  #  image: node:20-alpine
  #  container_name: jsdemo_server_realtime
  #  command:  sh -c "cd /server_realtime && sleep 10 && node index.js"
  #  restart: unless-stopped
  #  environment:
  #    - JS_IP_BIND=0.0.0.0
  #    - JS_HTTP_PORT=8080
  #    - JS_GRAFANA_SERVER=http://jsdemo_grafana:3000
  #    - JS_AUTHENTICATION=NOAUTH
  #    - PGPORT=5432
  #    - PGHOST=jsdemo_timescaledb
  #    - PGDATABASE=json_scada
  #    - PGUSER=json_scada
  #    - PGPASSWORD=
  #  volumes:
  #    - ../src/server_realtime:/server_realtime
  #    - ../src/htdocs:/htdocs
  #    - ./conf:/conf
  #  links:
  #    - jsdemo_mongorsn1
  #  # exports the HTTP port to the main host
  #  ports:
  #    - 8080:8080
  #  expose:
  #    - "8080"
  #  networks:
  #    - jsdemo_net

  # realtime web server, will listen on some HTTP port with auth, RBAC management UI
  server_realtime:
    image: node:20-alpine
    container_name: jsdemo_server_realtime_auth
    command:  sh -c "cd /server_realtime_auth && sleep 10 && node index.js"
    restart: unless-stopped
    environment:
      - JS_IP_BIND=0.0.0.0
      - JS_HTTP_PORT=8080
      - JS_GRAFANA_SERVER=http://jsdemo_grafana:3000
      - PGPORT=5432
      - PGHOST=jsdemo_timescaledb
      - PGDATABASE=json_scada
      - PGUSER=json_scada
      - PGPASSWORD=
    volumes:
      - ../src/server_realtime_auth:/server_realtime_auth
      - ../src/htdocs:/htdocs
      - ../src/htdocs-admin:/htdocs-admin
      - ../src/htdocs-login:/htdocs-login
      - ./conf:/conf
    links:
      - jsdemo_mongorsn1
    # exports the HTTP port to the main host
    ports:
      - 8080:8080
    expose:
      - "8080"
    networks:
      - jsdemo_net
    
  # calculation process
  calculations:
    image: node:20-alpine
    container_name: jsdemo_calculations
    command:  sh -c "sleep 15 && cd /jsonscada_bin/ && ./calculations"
    restart: unless-stopped
    volumes:
      - ./conf:/conf
      - ./bin:/jsonscada_bin
    links:
      - jsdemo_mongorsn1
    networks:
      - jsdemo_net

#  # Dnp3 client: requires wine/proton as it is currently Windows-only
#  dnp3_client_wine:
#    image: mtapiio/wine8:latest
#    container_name: js_dnp3_client_wine
#    command: sh -c "dpkg --add-architecture i386 &&          
#                    apt update && apt dist-upgrade -y &&
#                    apt install -y libc6:i386 libx11-6:i386 libdbus-1-dev:i386 libfreetype6:i386 &&
#                    apt install -y nano xvfb python3-pip wget libfreetype6 &&
#                    export WINEDEBUG=-all &&
#                    pip3 install protonup &&
#                    rm -rf /tmp/.X0-lock &&
#                    (Xvfb :0 -screen 0 1024x768x16 &) &&
#                    export DISPLAY=:0.0 &&
#                    cd /root &&
#                    wget -nc https://download.visualstudio.microsoft.com/download/pr/7bb7f85b-9bf0-4c6f-b3e4-a3832720f162/73e280cfd7f686c34748e0bf98d879c7/dotnet-runtime-6.0.19-win-x64.exe &&
#                    sleep 2 &&
#                    protonup -t 8.4 -y &&
#                    echo 555337b3129e4544846342bd94c9a8ac > /etc/machine-id &&
#                    /root/.steam/root/compatibilitytools.d/GE-Proton8-4/files/bin/wine64 dotnet-runtime-6.0.19-win-x64.exe /q &&
#                    /root/.steam/root/compatibilitytools.d/GE-Proton8-4/files/bin/wine64 ../jsonscada_bin/Dnp3Client.exe "
#    volumes:
#      - ./conf:/conf
#      - ./bin_win:/jsonscada_bin
#    links:
#      - jsdemo_mongorsn1
#    networks:
#      - jsdemo_net

#  # Metabase for dashboards (can connect to MONGODB and POSTGRESQL)
#  metabase:
#    image: metabase/metabase:latest
#    container_name: jsdemo_metabase
#    restart: unless-stopped
#    ports:
#      - 3001:3000
#    links:
#      - jsdemo_mongorsn1
#      - timescaledb
#    networks:
#      - jsdemo_net

networks:
  jsdemo_net:
    driver: bridge
