x-logging: &default-logging
  options:
    max-size: "12m"
    max-file: "5"
  driver: json-file

services:
{% if container_enabled_portainer %}
  # Portainer container, webgui for docker
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "traefik_net"
    {% if expose_ports_enabled_portainer %}
    ports:
      - 9000:9000
    {% endif %}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${HMSD_APPS_PATH}/portainer/config:/data
    {% if traefik_enabled_portainer or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_portainer %}
      - traefik.enable=true
      - traefik.http.services.portainer-${COMPOSE_PROJECT}.loadbalancer.server.port=9000
      - traefik.http.routers.portainer-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['portainer']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_portainer %}
      - traefik.http.routers.portainer-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_portainer %}
      - traefik.http.routers.portainer-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-portainer-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_portainer %}
      - homepage.group=Infrastructure
      - homepage.name=Portainer
      - homepage.icon=portainer.png
      - homepage.href=http://{{ hms_docker_container_map['portainer']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=Container Management
      - homepage.widget.type=portainer
      - homepage.widget.url=https://portainer:9443
      - homepage.widget.env=1
      - homepage.widget.key=${PORTAINER_KEY:-apikeyapikeyapikey}
      {% if homepage_stats_enabled_portainer %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_homepage %}
  # homepage container, dashboarding
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "traefik_net"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${HMSD_APPS_PATH}/homepage/config:/app/config
    environment:
      - TZ=${TIMEZONE}
    {% if expose_ports_enabled_homepage %}
    ports:
      - 3000:3000
    {% endif %}
    {% if traefik_enabled_homepage %}
    labels:
      - traefik.enable=true
      - traefik.http.services.homepage-${COMPOSE_PROJECT}.loadbalancer.server.port=3000
      - traefik.http.routers.homepage-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['homepage']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_homepage %}
      - traefik.http.routers.homepage-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_homepage %}
      - traefik.http.routers.homepage-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-homepage-midware@docker
        {% endif %}
    {% endif %}
{% endif %}

{% if container_enable_auto_updates %}
  # Watchtower container, automatic updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "traefik_net"
    command: --cleanup --schedule "{{ container_auto_update_schedule }}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    {% if container_enabled_homepage %}
    environment:
      - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_KEY}
      - WATCHTOWER_HTTP_API_METRICS=true
    labels:
      - homepage.group=Infrastructure
      - homepage.name=Watchtower
      - homepage.icon=watchtower.png
      - homepage.description=Container Updates
      - homepage.widget.type=watchtower
      - homepage.widget.url=http://watchtower:8080
      - homepage.widget.key=${WATCHTOWER_KEY:-apikeyapikeyapikey}
    {% endif %}
{% endif %}

{% if container_enabled_traefik %}
  # Traefik container, loadbalancer/reverse-proxy/ssl
  traefik:
    image: traefik:${TRAEFIK_TAG}
    container_name: traefik
    restart: ${RESTART_POLICY}
    logging: *default-logging
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    environment:
      - TZ=${TIMEZONE}
      - PUID=${PUID}
      - PGID=${PGID}
    {% if traefik_ssl_dns_provider_environment_vars %}
        {% for key, value in traefik_ssl_dns_provider_environment_vars.items() %}
        {# Due to how Ansible interprets curly brackets, I had to use 'raw' statements in order to render the ${} around the ansible 'key' variable to reference the .env file variable #}
      - {{ key }}={% raw %}${{% endraw %}{{ key }}{% raw %}}{% endraw +%}
        {% endfor %}
    {% endif %}
    networks:
      - "traefik_net"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${HMSD_APPS_PATH}/traefik/config/traefik.yml:/etc/traefik/traefik.yml
      - ${HMSD_APPS_PATH}/traefik/config/certs/:/certs/
    {% if traefik_ext_hosts_enabled %}
      - {{ traefik_ext_hosts_configs_path }}:/etc/traefik/static_files
    {% endif %}
    {% if traefik_enabled_traefik or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_traefik %}
      - traefik.enable=true
      - traefik.http.routers.traefik-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['traefik']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
      - traefik.http.services.traefik-${COMPOSE_PROJECT}.loadbalancer.server.port=8080
      - traefik.http.middlewares.internal-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, {{ traefik_subnet_allow_list }}
      - traefik.http.middlewares.external-ipwhitelist.ipwhitelist.sourcerange=0.0.0.0/0
      - traefik.http.routers.traefik-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% if authentik_enabled_traefik %}
      - traefik.http.routers.traefik-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-traefik-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_traefik %}
      - homepage.group=Infrastructure
      - homepage.name=Traefik
      - homepage.icon=traefik.png
      - homepage.href=http://{{ hms_docker_container_map['traefik']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=Reverse Proxy
      - homepage.widget.type=traefik
      - homepage.widget.url=http://traefik:8080
      {% if homepage_stats_enabled_traefik %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
{% endif %}

{% if authentik_enabled_globally %}
  # Authentik container, authentication/authorization
  authentik-postgresql:
    container_name: authentik-postgresql
    image: postgres:12-alpine
    restart: ${RESTART_POLICY}
    networks:
      - authentik_net
    logging: *default-logging
    healthcheck:
      test: ["CMD", "pg_isready"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - authentik_database:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${PG_PASS:?database password required}
      - POSTGRES_USER=${PG_USER:-authentik}
      - POSTGRES_DB=${PG_DB:-authentik}
    
  authentik-redis:
    container_name: authentik-redis
    image: redis:alpine
    restart: ${RESTART_POLICY}
    networks:
      - authentik_net
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s

  authentik-server:
    container_name: authentik-server
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-latest}
    restart: ${RESTART_POLICY}
    networks:
      - authentik_net
      - traefik_net
    logging: *default-logging
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS:?database password required}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      # AUTHENTIK_ERROR_REPORTING__ENABLED: "true"
      # WORKERS: 2
    volumes:
      - ${HMSD_APPS_PATH}/authentik/media:/media
      - ${HMSD_APPS_PATH}/authentik/custom-templates:/templates
      - authentik_geoip:/geoip
    {% if expose_ports_enabled_authentik %}
    ports:
      - 9001:9000
      - 9443:9443
    {% endif %}
    {% if traefik_enabled_authentik or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_authentik %}
      - traefik.enable=true
      - traefik.http.services.authentik-server-${COMPOSE_PROJECT}.loadbalancer.server.port=9443
      - traefik.http.services.authentik-server-${COMPOSE_PROJECT}.loadbalancer.server.scheme=https
      - traefik.http.routers.authentik-server-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['authentik']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_authentik %}
      - traefik.http.routers.authentik-server-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_authentik %}
      - traefik.http.routers.authentik-server-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-authentik-server-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_authentik %}
      - homepage.group=Infrastructure
      - homepage.name=Authentik
      - homepage.icon=authentik.png
      - homepage.href=https://{{ hms_docker_container_map['authentik']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=Single Sign-On
      - homepage.widget.type=authentik
      - homepage.widget.url=http://authentik-server:9000
      - homepage.widget.key=${AUTHENTIK_KEY:-apikeyapikeyapikey}
      {% if homepage_stats_enabled_authentik %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}

  authentik-worker:
    container_name: authentik-worker
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-latest}
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - authentik_net
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS:?database password required}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      # AUTHENTIK_ERROR_REPORTING__ENABLED: "true"
    # This is optional, and can be removed. If you remove this, the following will happen
    # - The permissions for the /media folders aren't fixed, so make sure they are 1000:1000
    # - The docker socket can't be accessed anymore
    user: root
    volumes:
      - ${HMSD_APPS_PATH}/authentik/media:/media
      - ${HMSD_APPS_PATH}/authentik/certs:/certs
      - /var/run/docker.sock:/var/run/docker.sock
      - ${HMSD_APPS_PATH}/authentik/custom-templates:/templates
      - authentik_geoip:/geoip

  {% if authentik_geoip_enabled %}
  authentik-geoipupdate:
    container_name: authentik-geoipupdate
    image: "maxmindinc/geoipupdate:latest"
    logging: *default-logging
    networks:
      - authentik_net
    volumes:
      - "authentik_geoip:/usr/share/GeoIP"
    environment:
      GEOIPUPDATE_EDITION_IDS: "GeoLite2-City"
      GEOIPUPDATE_FREQUENCY: "8"
      GEOIPUPDATE_ACCOUNT_ID: "${GEOIP_ACC_ID}"
      GEOIPUPDATE_LICENSE_KEY: "${GEOIP_LIC_KEY}"
  {% endif %}
{% endif %}

{% if container_enabled_nzbget %}
  # NZBGet container
  nzbget:
    image: lscr.io/linuxserver/nzbget:latest
    container_name: nzbget
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "traefik_net"
      - "download_net"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${HMSD_APPS_PATH}/nzbget/config:/config
    {% if nzbget_enable_downloads_mount %}
      - ${HMSD_APPS_PATH}/nzbget/downloads:/data/usenet
    {% endif %}
    {% if expose_ports_enabled_nzbget %}
    ports:
      - 6789:6789
    {% endif %}
    {% if traefik_enabled_nzbget or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_nzbget %}
      - traefik.enable=true
      - traefik.http.services.nzbget-${COMPOSE_PROJECT}.loadbalancer.server.port=6789
      - traefik.http.routers.nzbget-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['nzbget']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_nzbget %}
      - traefik.http.routers.nzbget-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_nzbget %}
      - traefik.http.routers.nzbget-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-nzbget-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_nzbget %}
      - homepage.group=Downloads
      - homepage.name=NZBget
      - homepage.icon=nzbget.png
      - homepage.href=http://{{ hms_docker_container_map['nzbget']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=NZB Manager
      - homepage.widget.type=nzbget
      - homepage.widget.url=http://nzbget:8080
      - homepage.widget.key=${NZBGET_KEY:-apikeyapikeyapikey}
      {% if homepage_stats_enabled_nzbget %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_sabnzbd %}
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "traefik_net"
      - "download_net"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${HMSD_APPS_PATH}/sabnzbd/config:/config
      {% if sabnzbd_enable_downloads_mount %}
      - ${HMSD_APPS_PATH}/sabnzbd/downloads:/downloads
      - ${HMSD_APPS_PATH}/sabnzbd/incomplete-downloads:/incomplete-downloads
      {% endif %}
    {% if expose_ports_enabled_sabnzbd %}
    ports:
      - 8082:8080
    {% endif %}
    {% if traefik_enabled_sabnzbd or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_sabnzbd %}
      - traefik.enable=true
      - traefik.http.services.sabnzbd-${COMPOSE_PROJECT}.loadbalancer.server.port=8080
      - traefik.http.routers.sabnzbd-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['sabnzbd']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_sabnzbd %}
      - traefik.http.routers.sabnzbd-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_sabnzbd %}
      - traefik.http.routers.sabnzbd-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-sabnzbd-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_sabnzbd %}
      - homepage.group=Downloads
      - homepage.name=SABnzbd
      - homepage.icon=sabnzbd.png
      - homepage.href=http://{{ hms_docker_container_map['sabnzbd']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=NZB Manager
      - homepage.widget.type=sabnzbd
      - homepage.widget.url=http://sabnzbd:8080
      - homepage.widget.key=${SABNZBD_KEY:-apikeyapikeyapikey}
      {% if homepage_stats_enabled_sabnzbd %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_transmission %}
  # Transmission container, torrent client/VPN, has HTTP proxy listening on port 8888
  transmission:
    image: haugene/transmission-openvpn:latest
    container_name: transmission
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "download_net"
    cap_add:
      - NET_ADMIN
    {% if expose_ports_enabled_transmission %}
    ports:
      - 9091:9091
      - 8888:8888
    {% endif %}
    dns:
      - '{{ transmission_dns_1 }}'
      - '{{ transmission_dns_2 }}'
    volumes:
      - ${HMSD_APPS_PATH}/transmission/config:/data/transmission-home
    {% if transmission_ovpn_config_local_path != "" and transmission_vpn_provider == "custom" %}
      - ${VPN_CONFIG_LOCAL_PATH}:/etc/openvpn/custom
    {% endif %}
    {% if transmission_use_nas_enabled %}
      - {{ hms_docker_mount_path }}/apps/transmission/torrents:/data/torrents
    {% elif transmission_custom_download_path_enabled %}
      - {{ transmission_custom_download_path }}/torrents:/data/torrents
    {% else %}
      - ${HMSD_APPS_PATH}/transmission/torrents:/data/torrents
    {% endif %}
    {% if container_enabled_homepage and homepage_enabled_transmission %}
    labels:
      - homepage.group=Downloads
      - homepage.name=Transmission VPN Route
      - homepage.icon=transmission.png
      - homepage.description=Torrent Traffic Stats
      - homepage.showStats=true
    {% endif %}
    environment:
      - OPENVPN_PROVIDER=${VPN_PROVIDER}
      - OPENVPN_USERNAME=${VPN_USER}
      - OPENVPN_PASSWORD=${VPN_PASS}
      {% if transmission_ovpn_config_source_repo != "" %}
      - GITHUB_CONFIG_SOURCE_REPO=${VPN_REPO}
      {% endif %}
      {% if transmission_ovpn_config_file != "" %}
      - OPENVPN_CONFIG=${VPN_CONFIG}
      {% endif %}
      - OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60
      - TRANSMISSION_WEB_UI=transmission-web-control
      - TRANSMISSION_DOWNLOAD_DIR=/data/torrents
      - TRANSMISSION_INCOMPLETE_DIR=/data/torrents/incomplete
      - TRANSMISSION_INCOMPLETE_DIR_ENABLED=true
      - TRANSMISSION_WATCH_DIR_ENABLED=false
      - TZ=${TIMEZONE}
      - PUID=${PUID}
      - PGID=${PGID}
      - WEBPROXY_ENABLED=true
      - WEBPROXY_PORT=8888
      - HEALTH_CHECK_HOST=google.com
      - TRANSMISSION_RATIO_LIMIT={{ transmission_ratio_limit }}
      - TRANSMISSION_RATIO_LIMIT_ENABLED={{ transmission_ratio_enabled }}
      - LOCAL_NETWORK={{ hms_docker_network_subnet }}
    {% for key, value in transmission_additional_env_vars.items() %}
      - {{ key }}={{ value }}
    {% endfor %}

  # frontend reverse-proxy for Transmission
  transmission-proxy:
    image: haugene/transmission-openvpn-proxy:latest
    container_name: transmission-proxy
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "download_net"
      - "traefik_net"
    depends_on:
      - transmission
    environment:
      - TZ=${TIMEZONE}
    {% if expose_ports_enabled_transmission %}
    ports:
      - 8081:8080
    {% endif %}
    {% if traefik_enabled_transmission or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_transmission %}
      - traefik.enable=true
      - traefik.http.routers.transmission-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['transmission']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
      - traefik.http.services.transmission-${COMPOSE_PROJECT}.loadbalancer.server.port=8080
        {% if not expose_public_enabled_transmission %}
      - traefik.http.routers.transmission-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_transmission %}
      - traefik.http.routers.transmission-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-transmission-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_transmission %}
      - homepage.group=Downloads
      - homepage.name=Transmission
      - homepage.icon=transmission.png
      - homepage.href=http://{{ hms_docker_container_map['transmission']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=Torrent Management
      - homepage.widget.type=transmission
      - homepage.widget.url=http://transmission-proxy:8080
      {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_requestrr %}
  # Requestrr container, chat client for requests
  requestrr:
    image: darkalfx/requestrr:latest
    container_name: requestrr
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "download_net"
      - "traefik_net"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${HMSD_APPS_PATH}/requestrr/config:/root/config
    {% if expose_ports_enabled_requestrr %}
    ports:
      - 4545:4545
    {% endif %}
    {% if traefik_enabled_requestrr %}
    labels:
      - traefik.enable=true
      - traefik.http.services.requestrr-${COMPOSE_PROJECT}.loadbalancer.server.port=4545
      - traefik.http.routers.requestrr-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['requestrr']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_requestrr %}
      - traefik.http.routers.requestrr-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_requestrr %}
      - traefik.http.routers.requestrr-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-requestrr-midware@docker
        {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_prowlarr %}
  # Prowlarr container, torrent indexer
  prowlarr:
    image: linuxserver/prowlarr:develop
    container_name: prowlarr
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "download_net"
      - "traefik_net"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${HMSD_APPS_PATH}/prowlarr/config:/config
    {% if expose_ports_enabled_prowlarr %}
    ports:
      - 9696:9696
    {% endif %}
    {% if traefik_enabled_prowlarr or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_prowlarr %}
      - traefik.enable=true
      - traefik.http.services.prowlarr-${COMPOSE_PROJECT}.loadbalancer.server.port=9696
      - traefik.http.routers.prowlarr-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['prowlarr']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_prowlarr %}
      - traefik.http.routers.prowlarr-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_prowlarr %}
      - traefik.http.routers.prowlarr-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-prowlarr-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_prowlarr %}
      - homepage.group=Managers
      - homepage.name=Prowlarr
      - homepage.icon=prowlarr.png
      - homepage.href=http://{{ hms_docker_container_map['prowlarr']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=Indexer Management
      - homepage.widget.type=prowlarr
      - homepage.widget.url=http://prowlarr:9696
      - homepage.widget.key=${PROWLARR_KEY:-apikeyapikeyapikey}
      {% if homepage_stats_enabled_prowlarr %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_sonarr %}
  # Sonarr container, tv show indexer
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "download_net"
      - "traefik_net"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    {% if traefik_enabled_sonarr or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_sonarr %}
      - traefik.enable=true
      - traefik.http.services.sonarr-${COMPOSE_PROJECT}.loadbalancer.server.port=8989
      - traefik.http.routers.sonarr-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['sonarr']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_sonarr %}
      - traefik.http.routers.sonarr-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_sonarr %}
      - traefik.http.routers.sonarr-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-sonarr-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_sonarr %}
      - homepage.group=Managers
      - homepage.name=Sonarr
      - homepage.icon=sonarr.png
      - homepage.href=http://{{ hms_docker_container_map['sonarr']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=TV Show Manager
      - homepage.widget.type=sonarr
      - homepage.widget.url=http://sonarr:8989
      - homepage.widget.key=${SONARR_KEY:-apikeyapikeyapikey}
      {% if homepage_stats_enabled_sonarr %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
    volumes:
      - ${HMSD_APPS_PATH}/sonarr/config:/config
    {% if transmission_use_nas_enabled %}
      - {{ hms_docker_mount_path }}/apps/transmission/torrents:/data/torrents
    {% elif transmission_custom_download_path_enabled %}
      - {{ transmission_custom_download_path }}/torrents:/data/torrents
    {% else %}
      - ${HMSD_APPS_PATH}/transmission/torrents:/data/torrents
    {% endif %}
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
    {% endif %}
    {% if expose_ports_enabled_sonarr %}
    ports:
      - 8989:8989
    {% endif %}
{% endif %}

{% if container_enabled_sonarr and separate_4k_instances_enable is defined and separate_4k_instances_enable %}
  # Sonarr container, tv show indexer
  sonarr-{{ separate_4k_instances_suffix }}:
    image: linuxserver/sonarr:latest
    container_name: sonarr-{{ separate_4k_instances_suffix }}
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "download_net"
      - "traefik_net"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    {% if traefik_enabled_sonarr or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_sonarr %}
      - traefik.enable=true
      - traefik.http.services.sonarr-{{ separate_4k_instances_suffix }}-${COMPOSE_PROJECT}.loadbalancer.server.port=8989
      - traefik.http.routers.sonarr-{{ separate_4k_instances_suffix }}-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['sonarr']['proxy_host_rule'] }}-{{ separate_4k_instances_suffix }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_sonarr %}
      - traefik.http.routers.sonarr-{{ separate_4k_instances_suffix }}-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_sonarr %}
      - traefik.http.routers.sonarr-{{ separate_4k_instances_suffix }}-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-sonarr-{{ separate_4k_instances_suffix }}-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_sonarr %}
      - homepage.group=Managers - 4K
      - homepage.name=Sonarr - {{ separate_4k_instances_suffix }}
      - homepage.icon=sonarr.png
      - homepage.href=http://{{ hms_docker_container_map['sonarr']['proxy_host_rule'] }}-{{ separate_4k_instances_suffix }}.${HMSD_DOMAIN}
      - homepage.description=TV Show Manager
      - homepage.widget.type=sonarr
      - homepage.widget.url=http://sonarr-{{ separate_4k_instances_suffix }}:8989
      - homepage.widget.key=${SONARR_4K_KEY:-apikeyapikeyapikey}
      {% if homepage_stats_enabled_sonarr %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
    volumes:
      - ${HMSD_APPS_PATH}/sonarr-{{ separate_4k_instances_suffix }}/config:/config
    {% if transmission_use_nas_enabled %}
      - {{ hms_docker_mount_path }}/apps/transmission/torrents:/data/torrents
    {% elif transmission_custom_download_path_enabled %}
      - {{ transmission_custom_download_path }}/torrents:/data/torrents
    {% else %}
      - ${HMSD_APPS_PATH}/transmission/torrents:/data/torrents
    {% endif %}
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
    {% endif %}
    {% if expose_ports_enabled_sonarr %}
    ports:
      - 8990:8989
    {% endif %}
{% endif %}

{% if container_enabled_radarr %}
  # Radarr container, movie indexer
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "download_net"
      - "traefik_net"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    {% if traefik_enabled_radarr or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_radarr %}
      - traefik.enable=true
      - traefik.http.services.radarr-${COMPOSE_PROJECT}.loadbalancer.server.port=7878
      - traefik.http.routers.radarr-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['radarr']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_radarr %}
      - traefik.http.routers.radarr-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_radarr %}
      - traefik.http.routers.radarr-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-radarr-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_radarr %}
      - homepage.group=Managers
      - homepage.name=Radarr
      - homepage.icon=radarr.png
      - homepage.href=http://{{ hms_docker_container_map['radarr']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=Movie Manager
      - homepage.widget.type=radarr
      - homepage.widget.url=http://radarr:7878
      - homepage.widget.key=${RADARR_KEY:-apikeyapikeyapikey}
      {% if homepage_stats_enabled_radarr %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
    volumes:
      - ${HMSD_APPS_PATH}/radarr/config:/config
    {% if transmission_use_nas_enabled %}
      - {{ hms_docker_mount_path }}/apps/transmission/torrents:/data/torrents
    {% elif transmission_custom_download_path_enabled %}
      - {{ transmission_custom_download_path }}/torrents:/data/torrents
    {% else %}
      - ${HMSD_APPS_PATH}/transmission/torrents:/data/torrents
    {% endif %}
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
    {% endif %}
    {% if expose_ports_enabled_radarr %}
    ports:
      - 7878:7878
    {% endif %}
{% endif %}

{% if container_enabled_radarr and separate_4k_instances_enable is defined and separate_4k_instances_enable %}
  # Radarr container, movie indexer
  radarr-{{ separate_4k_instances_suffix }}:
    image: linuxserver/radarr:latest
    container_name: radarr-{{ separate_4k_instances_suffix }}
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "download_net"
      - "traefik_net"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    {% if traefik_enabled_radarr or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_radarr %}
      - traefik.enable=true
      - traefik.http.services.radarr-{{ separate_4k_instances_suffix }}-${COMPOSE_PROJECT}.loadbalancer.server.port=7878
      - traefik.http.routers.radarr-{{ separate_4k_instances_suffix }}-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['radarr']['proxy_host_rule'] }}-{{ separate_4k_instances_suffix }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_radarr %}
      - traefik.http.routers.radarr-{{ separate_4k_instances_suffix }}-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_radarr %}
      - traefik.http.routers.radarr-{{ separate_4k_instances_suffix }}-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-radarr-{{ separate_4k_instances_suffix }}-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_radarr %}
      - homepage.group=Managers - 4K
      - homepage.name=Radarr - {{ separate_4k_instances_suffix }}
      - homepage.icon=radarr.png
      - homepage.href=http://{{ hms_docker_container_map['radarr']['proxy_host_rule'] }}-{{ separate_4k_instances_suffix }}.${HMSD_DOMAIN}
      - homepage.description=Movie Manager
      - homepage.widget.type=radarr
      - homepage.widget.url=http://radarr-{{ separate_4k_instances_suffix }}:7878
      - homepage.widget.key=${RADARR_4K_KEY:-apikeyapikeyapikey}
      {% if homepage_stats_enabled_radarr %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
    volumes:
      - ${HMSD_APPS_PATH}/radarr-{{ separate_4k_instances_suffix }}/config:/config
    {% if transmission_use_nas_enabled %}
      - {{ hms_docker_mount_path }}/apps/transmission/torrents:/data/torrents
    {% elif transmission_custom_download_path_enabled %}
      - {{ transmission_custom_download_path }}/torrents:/data/torrents
    {% else %}
      - ${HMSD_APPS_PATH}/transmission/torrents:/data/torrents
    {% endif %}
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
    {% endif %}
    {% if expose_ports_enabled_radarr %}
    ports:
      - 7879:7878
    {% endif %}
{% endif %}

{% if container_enabled_bazarr %}
  # Bazarr container, subtitle indexer
  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "traefik_net"
    {% if expose_ports_enabled_bazarr %}
    ports:
      - 6767:6767
    {% endif %}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${HMSD_APPS_PATH}/bazarr/config:/config
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
    {% endif %}
    {% if traefik_enabled_bazarr or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_bazarr %}
      - traefik.enable=true
      - traefik.http.services.bazarr-${COMPOSE_PROJECT}.loadbalancer.server.port=6767
      - traefik.http.routers.bazarr-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['bazarr']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_bazarr %}
      - traefik.http.routers.bazarr-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_bazarr %}
      - traefik.http.routers.bazarr-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-bazarr-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_bazarr %}
      - homepage.group=Managers
      - homepage.name=Bazarr
      - homepage.icon=bazarr.png
      - homepage.href=http://{{ hms_docker_container_map['bazarr']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=Subtitle Manager
      - homepage.widget.type=bazarr
      - homepage.widget.url=http://bazarr:6767
      - homepage.widget.key=${BAZARR_KEY:-apikeyapikeyapikey}
      {% if homepage_stats_enabled_bazarr %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_overseerr %}
  # Overseer container, request platform
  overseerr:
    image: linuxserver/overseerr:latest
    container_name: overseerr
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "media_net"
      - "download_net"
      - "traefik_net"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    {% if traefik_enabled_overseerr or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_overseerr %}
      - traefik.enable=true
      - traefik.http.services.overseerr-${COMPOSE_PROJECT}.loadbalancer.server.port=5055
      - traefik.http.routers.overseerr-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['overseerr']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
      - traefik.http.routers.overseerr-${COMPOSE_PROJECT}.middlewares=external-ipwhitelist
        {% if authentik_enabled_overseerr %}
      - traefik.http.routers.overseerr-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-overseerr-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_overseerr %}
      - homepage.group=Managers
      - homepage.name=Overseerr
      - homepage.icon=overseerr.png
      - homepage.href=http://{{ hms_docker_container_map['overseerr']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=Request Manager
      - homepage.widget.type=overseerr
      - homepage.widget.url=http://overseerr:5055
      - homepage.widget.key=${OVERSEERR_KEY:-apikeyapikeyapikey}
      {% if homepage_stats_enabled_overseerr %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
    volumes:
      - ${HMSD_APPS_PATH}/overseerr/config:/config
    {% if expose_ports_enabled_overseerr %}
    ports:
      - 5055:5055
    {% endif %}
{% endif %}

{% if container_enabled_plex %}
  # Plex container, media server
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    restart: ${RESTART_POLICY}
    {% if enable_intel_gpu %}
    devices:
      - /dev/dri:/dev/dri
    {% endif %}
    logging: *default-logging
    networks:
      - "media_net"
      - "traefik_net"
    ports:
      - 32400:32400/tcp
      - 3005:3005/tcp
      - 8324:8324/tcp
      - 32469:32469/tcp
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
    environment:
      - VERSION=docker
      - TZ=${TIMEZONE}
      - PUID=${PUID}
      - PGID=${PGID}
      - PLEX_CLAIM=${PLEX_CLAIM_TOKEN}
      - ADVERTISE_IP={{ plex_advertise_ip }}:32400
      - ALLOWED_NETWORKS={{ hms_docker_network_subnet }}
    {% if enable_nvidia_gpu %}
      - NVIDIA_VISIBLE_DEVICES=all
    runtime: nvidia
    {% endif %}
    volumes:
      - ${HMSD_APPS_PATH}/plex/config:/config
      # temp folder for Plex transcoding
      - {{ plex_transcode_folder }}:/transcode
      # media folder where all movies and series are stored
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
    {% endif %}
    {% if traefik_enabled_plex or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_plex %}
      - traefik.enable=true
      - traefik.http.services.plex-${COMPOSE_PROJECT}.loadbalancer.server.port=32400
      - traefik.http.services.plex-${COMPOSE_PROJECT}.loadbalancer.server.scheme=https
      - traefik.http.routers.plex-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['plex']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_plex %}
      - traefik.http.routers.plex-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_plex %}
      - traefik.http.routers.plex-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-plex-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_plex %}
      - homepage.group=Media
      - homepage.name=Plex
      - homepage.icon=plex.png
      - homepage.href=http://{{ hms_docker_container_map['plex']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=Media Server
      - homepage.widget.type=plex
      - homepage.widget.url=https://plex:32400
      - homepage.widget.key=${PLEX_KEY:-apikeyapikeyapikey}
      {% if homepage_stats_enabled_plex %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_tautulli %}
  # Tautulli container, analytics
  tautulli:
    image: tautulli/tautulli:latest
    container_name: tautulli
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "media_net"
      - "traefik_net"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    {% if traefik_enabled_tautulli or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_tautulli %}
      - traefik.enable=true
      - traefik.http.services.tautulli-${COMPOSE_PROJECT}.loadbalancer.server.port=8181
      - traefik.http.routers.tautulli-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['tautulli']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_tautulli %}
      - traefik.http.routers.tautulli-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_tautulli %}
      - traefik.http.routers.tautulli-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-tautulli-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_tautulli %}
      - homepage.group=Media
      - homepage.name=Tautulli
      - homepage.icon=tautulli.png
      - homepage.href=http://{{ hms_docker_container_map['tautulli']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=Media Analytics
      - homepage.widget.type=tautulli
      - homepage.widget.url=http://tautulli:8181
      - homepage.widget.key=${TAUTULLI_KEY:-apikeyapikeyapikey}
      {% if homepage_stats_enabled_tautulli %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
    {% if expose_ports_enabled_tautulli %}
    ports:
      - 8181:8181
    {% endif %}
    volumes:
      - ${HMSD_APPS_PATH}/tautulli/config:/config
      # Plex logs location
      - ${HMSD_APPS_PATH}/plex/config/Library/Application Support/Plex Media Server/Logs:/plex_logs:ro
{% endif %}

{% if cloudflare_ddns_enabled %}
  # Cloudflare DDNS container
  cloudflare-ddns:
    image: oznu/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    restart: ${RESTART_POLICY}
    logging: *default-logging
    environment:
      - API_KEY=${CLOUDFLARE_API_TOKEN}
      - ZONE=${CLOUDFLARE_DOMAIN}
      - DELETE_ON_STOP={{ cloudflare_ddns_delete_record_on_stop }}
    {% if cloudflare_ddns_create_ipv6_aaaa_record %}
      - RRTYPE=AAAA
    {% endif %}
    {% if cloudflare_ddns_subdomain %}
      - SUBDOMAIN={{ cloudflare_ddns_subdomain }}
    {% endif %}
      - PROXIED={{ cloudflare_ddns_proxied }}
{% endif %}

{% if cloudflare_tunnel_enabled and cloudflare_tunnel_token != "" %}
  # Cloudflare Tunnel container
  cloudflare-tunnel:
    image: cloudflare/cloudflared:latest
    container_name: cloudflare-tunnel
    restart: ${RESTART_POLICY}
    networks:
      - "traefik_net"
    logging: *default-logging
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
{% endif %}

{% if container_enabled_flaresolverr %}
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "download_net"
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TIMEZONE}
    {% if expose_ports_enabled_flaresolverr %}
    ports:
      - 8191:8191
    {% endif %}
{% endif %}

{% if container_enabled_tdarr %}
  # tdarr container, transcoding
  tdarr:
    container_name: tdarr
    image: ghcr.io/haveagitgat/tdarr:latest
    {% if tdarr_enable_intel_gpu %}
    devices:
      - /dev/dri:/dev/dri
    {% endif %}
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - "traefik_net"
    {% if expose_ports_enabled_tdarr %}
    ports:
      - 8265:8265 # webUI port
      - 8266:8266 # server port
      #- 8267:8267 # Internal node port
      #- 8268:8268 # Example extra node port
    {% endif %}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - UMASK_SET=002
      - serverIP=0.0.0.0
      - serverPort=8266
      - webUIPort=8265
      - internalNode=true
      - nodeName=MyInternalNode
    {% if tdarr_enable_nvidia_gpu %}
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
    runtime: nvidia
    {% endif %}
    {% if traefik_enabled_tdarr or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_tdarr %}
      - traefik.enable=true
      - traefik.http.services.tdarr-${COMPOSE_PROJECT}.loadbalancer.server.port=8265
      - traefik.http.routers.tdarr-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['tdarr']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_tdarr %}
      - traefik.http.routers.tdarr-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_tdarr %}
      - traefik.http.routers.tdarr-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-tdarr-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_tdarr %}
      - homepage.group=Managers
      - homepage.name=Tdarr
      - homepage.icon=tdarr.png
      - homepage.href=http://{{ hms_docker_container_map['tdarr']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=Transcode Manager
      - homepage.widget.type=tdarr
      - homepage.widget.url=http://tdarr:8265
      {% if homepage_stats_enabled_tdarr %}
      - homepage.showStats=true
      {% endif %}
      {% endif %}
    {% endif %}
    volumes:
      - ${HMSD_APPS_PATH}/tdarr/config/server:/app/server
      - ${HMSD_APPS_PATH}/tdarr/config/app:/app/configs
      - ${HMSD_APPS_PATH}/tdarr/config/logs:/app/logs
      - {{ tdarr_transcode_folder }}:/temp
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
    {% endif %}
{% endif %}

{% if container_enabled_tailscale %}
  # tailscale container, VPN
  tailscale:
    image: tailscale/tailscale
    container_name: tailscale
    restart: ${RESTART_POLICY}
    logging: *default-logging
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - '/var/lib:/var/lib'
      - '/dev/net/tun:/dev/net/tun'
    network_mode: host
    environment:
      - TS_AUTHKEY=${TAILSCALE_AUTH_KEY}
    {% if tailscale_enable_subnet_routes %}
      - TS_ROUTES={{ tailscale_subnet_routes }}
    {% endif %}
    {% if tailscale_advertise_exit_node %}
      - TS_EXTRA_ARGS=--advertise-exit-node
    {% endif %}
{% endif %}

{% if container_enabled_uptimekuma %}
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
    - traefik_net
    volumes:
      - ${HMSD_APPS_PATH}/uptimekuma/config:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    {% if expose_ports_enabled_uptimekuma %}
    ports:
      - 3001:3001
    {% endif %}
    environment:
    - PUID=${PUID}
    - PGID=${PGID}
    - TZ=${TIMEZONE}
    {% if traefik_enabled_uptimekuma %}
    labels:
      - traefik.enable=true
      - traefik.http.services.uptimekuma-${COMPOSE_PROJECT}.loadbalancer.server.port=3001
      - traefik.http.routers.uptimekuma-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['uptimekuma']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_uptimekuma %}
      - traefik.http.routers.uptimekuma-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_uptimekuma %}
      - traefik.http.routers.uptimekuma-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-uptimekuma-midware@docker
        {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_heimdall %}
  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    networks:
      - traefik_net
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    logging: *default-logging
    volumes:
      - ${HMSD_APPS_PATH}/heimdall/config:/config
    {% if expose_ports_enabled_heimdall %}
    ports:
      - 8000:80
      - 8443:443
    {% endif %}
    restart: ${RESTART_POLICY}
    {% if traefik_enabled_heimdall %}
    labels:
      - traefik.enable=true
      - traefik.http.services.heimdall-${COMPOSE_PROJECT}.loadbalancer.server.port=443
      - traefik.http.services.heimdall-${COMPOSE_PROJECT}.loadbalancer.server.scheme=https
      - traefik.http.routers.heimdall-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['heimdall']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
        {% if not expose_public_enabled_heimdall %}
      - traefik.http.routers.heimdall-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% endif %}
        {% if authentik_enabled_heimdall %}
      - traefik.http.routers.heimdall-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-heimdall-midware@docker
        {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_readarr %}
  readarr:
    image: lscr.io/linuxserver/readarr:develop
    restart: ${RESTART_POLICY}
    container_name: readarr
    logging: *default-logging
    networks:
      - traefik_net
      - download_net
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${HMSD_APPS_PATH}/readarr/config:/config
      {% if transmission_use_nas_enabled %}
      - {{ hms_docker_mount_path }}/apps/transmission/torrents:/data/torrents
      {% elif transmission_custom_download_path_enabled %}
      - {{ transmission_custom_download_path }}/torrents:/data/torrents
      {% else %}
      - ${HMSD_APPS_PATH}/transmission/torrents:/data/torrents
      {% endif %}
      - {{ hms_docker_media_path }}:/data/media
      {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
      {% endif %}
    {% if expose_ports_enabled_readarr %}
    ports:
      - 8787:8787
    {% endif %}
    {% if traefik_enabled_readarr or container_enabled_homepage %}
    labels:
      {% if traefik_enabled_readarr %}
      - traefik.enable=true
      - traefik.http.services.readarr-${COMPOSE_PROJECT}.loadbalancer.server.port=8787
      - traefik.http.routers.readarr-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['readarr']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
      - traefik.http.routers.readarr-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% if authentik_enabled_readarr %}
      - traefik.http.routers.readarr-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-readarr-midware@docker
        {% endif %}
      {% endif %}
      {% if container_enabled_homepage and homepage_enabled_readarr %}
      - homepage.group=Managers
      - homepage.name=Readarr
      - homepage.icon=readarr.png
      - homepage.href=http://{{ hms_docker_container_map['readarr']['proxy_host_rule'] }}.${HMSD_DOMAIN}
      - homepage.description=Media Analytics
      - homepage.widget.type=readarr
      - homepage.widget.url=http://readarr:8181
      - homepage.widget.key=${READARR_KEY:-apikeyapikeyapikey}
        {% if homepage_stats_enabled_readarr %}
      - homepage.showStats=true
        {% endif %}
      {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_kavita %}
  kavita:
    image: lscr.io/linuxserver/kavita:latest
    container_name: kavita
    networks:
      - traefik_net
    restart: ${RESTART_POLICY}
    logging: *default-logging
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${HMSD_APPS_PATH}/kavita/config:/config
      - {{ hms_docker_media_path }}:/data/media
    {% if nas_enable_additional_paths %}
      {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
      {% endfor %}
    {% endif %}
    {% if expose_ports_enabled_kavita %}
    ports:
      - 5000:5000
    {% endif %}
    {% if traefik_enabled_kavita %}
    labels:
      - traefik.enable=true
      - traefik.http.services.kavita-${COMPOSE_PROJECT}.loadbalancer.server.port=5000
      - traefik.http.routers.kavita-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['kavita']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
      - traefik.http.routers.kavita-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
      {% if authentik_enabled_kavita %}
      - traefik.http.routers.kavita-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-kavita-midware@docker
      {% endif %}
    {% endif %}
{% endif %}

{% if container_enabled_calibre %}
  calibre:
    image: lscr.io/linuxserver/calibre:latest
    container_name: calibre
    restart: ${RESTART_POLICY}
    logging: *default-logging
    networks:
      - traefik_net
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${HMSD_APPS_PATH}/calibre/config:/config
      - {{ hms_docker_media_path }}:/data/media
      {% if nas_enable_additional_paths %}
        {% for path in nas_client_remote_additional_paths %}
      - {{ path.local_mount_path }}/{{ hms_docker_library_folder_name }}:/data/media_additional/{{ path.name | map('regex_replace', regex, replace) | list | join }}
        {% endfor %}
      {% endif %}
    {% if expose_ports_enabled_calibre %}
    ports:
      - 8083:8080 # remote desktop http
      - 8182:8181 # remote desktop https
      - 8084:8081 # webserver (must be enabled in settings using remote desktop)
    {% endif %}
    {% if traefik_enabled_calibre %}
    labels:
      - traefik.enable=true
      - traefik.http.services.calibre-${COMPOSE_PROJECT}.loadbalancer.server.port=8181
      - traefik.http.services.calibre-${COMPOSE_PROJECT}.loadbalancer.server.scheme=https
      - traefik.http.routers.calibre-${COMPOSE_PROJECT}.rule=Host(`{{ hms_docker_container_map['calibre']['proxy_host_rule'] }}.${HMSD_DOMAIN}`)
      - traefik.http.routers.calibre-${COMPOSE_PROJECT}.middlewares=internal-ipwhitelist
        {% if authentik_enabled_calibre %}
      - traefik.http.routers.calibre-${COMPOSE_PROJECT}.middlewares=authentik-proxy-${COMPOSE_PROJECT}-calibre-midware@docker
        {% endif %}
    {% endif %}
{% endif %}

networks:
  "download_net":
    driver: bridge
    attachable: false
  "media_net":
    driver: bridge
    attachable: false
  "traefik_net":
    driver: bridge
    attachable: true
{% if authentik_enabled_globally %}
  "authentik_net":
    driver: bridge
    attachable: false
{% endif %}

{% if authentik_enabled_globally %}
volumes:
  authentik_database:
    driver: local
  authentik_geoip:
    driver: local
{% endif %}
