import os
from collections import Counter, defaultdict

from analytics.analytics import most_frequent_vulnerabilities_in_files
from single_file_vulnerability_scan.get_single_file_vulnerability import \
    get_single_file_vulnerability_filepath
from utils.check_file_extensions import get_file_type


def get_directory_file_vulnerability(directory_path, isAnalytics, directory_file_limit, isVerbose):
    # Get a list of all files in the directory
    files = os.listdir(directory_path)

    # Print the names of each file
    fileunique_vulnerability_counts = Counter()
    vulnerability_counts = defaultdict(int)
    severity_weighted_count = defaultdict(int)
    counter = 0
    file_extension = get_file_type(files[0])
    print("file_extension",file_extension)

    for file in files:
        try:
            # print("fileNo:", counter)
            if counter >= directory_file_limit:
                break
            file_absolute_path = os.path.join(directory_path, file)
            # print(file_absolute_path)
            vulnerabilities = get_single_file_vulnerability_filepath(file_absolute_path,isVerbose=isVerbose, file_extension=file_extension)
            if vulnerabilities:
                # error_counts = Counter(error["errorNo"] for error in vulnerabilities)
                # print(error_counts)
                unique_errors = set()  # Set to track unique errorNos in the current file
                for vulnerability in vulnerabilities:
                    unique_errors.add(vulnerability["errorNo"])
                    vulnerability_counts[vulnerability["errorNo"]] += 1
                    severity_weighted_count[vulnerability["errorNo"]] += vulnerability["severity"]

                for error_no in unique_errors:
                    fileunique_vulnerability_counts[error_no] += 1
            counter += 1
        except:
            # Open a file in append mode
            file_absolute_path = os.path.join(directory_path, file)
            with open('files_to_be_deleted.txt', 'a') as file:
                file.write(f"{file_absolute_path}\n")

            continue

    if isAnalytics:
        most_frequent_vulnerabilities_in_files(fileunique_vulnerability_counts, "Unique Error Numbers Across Files", 
                                            file_extension = file_extension)
        most_frequent_vulnerabilities_in_files(vulnerability_counts, "Non-Unique Error Numbers Across Files",
                                            file_extension = file_extension)
        most_frequent_vulnerabilities_in_files(severity_weighted_count, "Weighted Non-Unique Error Numbers Across Files", 
                                            file_extension = file_extension)