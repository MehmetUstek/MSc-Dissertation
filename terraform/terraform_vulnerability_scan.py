from terraform.ast_match import ast_match
from terraform.parse_terraform import parse_terraform
from utils import fetch_vulnerability_detail
from utils.load_json import load_json
from utils.logs.custom_formatter import logger_with_custom_formatter
from utils.logs.severity_printer import print_severity


def check_for_vulnerabilities(node, patterns):
    matches = []

    # Base conditions
    matches.extend(check_terraform_antipatterns(node, patterns))
    return matches


def check_terraform_antipatterns(ast, antipattern_trees):
    """Checks if any part of the AST matches any of the antipattern trees."""
    matches = []
    
    for pattern in antipattern_trees:
        if ast_match(pattern["tree"], ast):
            key = list(pattern['tree'].keys())[0]
            matches.append({"errorNo":str(pattern['errorNo']),"severity":pattern["severity"], "ast_subnode":pattern["tree"], "key":key})

    return matches


def get_terraform_file_vulnerabilities(file_path, isVerbose=True):
    # Set logger
    logger = logger_with_custom_formatter(file_path=file_path)

    # Load the configurations using the function
    patterns = load_json('terraform/antipattern_trees.json')
    # required_configurations = load_json('compose/missing_configuration_trees.json')
    error_descriptions = load_json('terraform/antipattern_descriptions.json')
    

    # Parsing the Dockerfile
    full_ast = parse_terraform(file_path)

    # Checking for vulnerabilities
    vulnerabilities = check_for_vulnerabilities(full_ast, patterns)
    if isVerbose:
        for vulnerability in vulnerabilities:
            vulnerability_detail = fetch_vulnerability_detail(error_descriptions=error_descriptions, errorNo=vulnerability.get("errorNo"), custom_error_message=vulnerability.get("customErrorMessage"),isdockerfile=False,is_missing_configuration=vulnerability.get("is_missing_configuration"), key=vulnerability.get("key"), ast_subnode=vulnerability.get("ast_subnode"))
            print_severity(logger, vulnerability["severity"], vulnerability_detail)
    
    return vulnerabilities


# Path to the Compose File
# terraform_file_path = './example.tf'

# get_terraform_file_vulnerabilities(terraform_file_path)