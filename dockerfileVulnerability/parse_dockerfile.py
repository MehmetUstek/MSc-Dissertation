import os

from dockerfileVulnerability.dockerfile_node import DockerfileNode
from utils import extract_user_group


def parse_dockerfile(file_path):
    """Parse Dockerfile contents from a file into an AST."""
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"The specified file does not exist: {file_path}")

    with open(file_path, 'r') as file:
        lines = file.readlines()

    user = ''

    root = DockerfileNode('ROOT', '', user, 1)
    it = iter(lines)
    
    extended_line_counter = 0

    for i,line in enumerate(it, 1):
        line = line.strip()
        if line and not line.startswith('#'):
            if line.endswith('\\'):
                # Handle multi-line instructions
                full_instruction = line[:-1].strip()
                while line.endswith('\\'):
                    line = next(it).strip()
                    full_instruction += line[:-1].strip()
                    extended_line_counter += 1
                line = full_instruction
            parts = line.split(' ', 1)
            if len(parts) > 1:
                instruction, args = parts[0], parts[1].strip()

                if (instruction == "USER"):
                    user = args
                    root.set_global_user(user)
                    # print("user", user)
                elif instruction == "FROM":
                    root.set_FROM(args)
                if (instruction == "RUN" and ("useradd" in args or "groupadd" in args)):
                    defined_user, defined_group = extract_user_group(args)
                    root.add_to_userMap(defined_user,defined_group)

                root.add_child(DockerfileNode(instruction, args, user, i+ extended_line_counter))
    return root