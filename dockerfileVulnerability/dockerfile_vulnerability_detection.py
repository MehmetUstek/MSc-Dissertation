import re
from collections import Counter
import json


from dockerfileVulnerability.dockerfile_node import DockerfileNode
from dockerfileVulnerability.outsource_image_vulnerability_scan import \
    outsource_image_vulnerability_scan as image_vulnerability_scan
from dockerfileVulnerability.parse_dockerfile import parse_dockerfile, parse_dockerfile_from_file_content
from utils import fetch_vulnerability_detail
from utils.load_json import load_json
from utils.logs.custom_formatter import logger_with_custom_formatter
from utils.logs.severity_printer import print_severity


def check_for_vulnerabilities(node: DockerfileNode, patterns, baseImageScan):
    matches = []
    # Base conditions
    if not node.globalUser:
        matches.append({"errorNo":"28","severity":10})
    elif not node.is_user_added(node.globalUser):
        matches.append({"errorNo":"25","severity":8})
    elif not node.get_group_from_user(node.globalUser):
        matches.append({"errorNo":"26","severity":8})

    # Antipattern Scan
    matches.extend(check_antipatterns(node, patterns))
    # Base Image Scan
    if baseImageScan:
        matches.extend(image_vulnerability_scan(node.FROM))

    return matches

def append_to_antipattern_list(lineNo, antipattern,matches):
    matches.append({"lineNo":lineNo, "errorNo":str(antipattern['errorNo']),"severity":antipattern["severity"]})


def add_antipatterns(node, antipattern,matches):
    if not 'user' in antipattern:
        append_to_antipattern_list(node.lineNo, antipattern, matches)
    elif antipattern['user'] is False and node.user == '': # Check for user not defined vulnerabilities
        append_to_antipattern_list(node.lineNo, antipattern, matches)

    
def check_antipatterns(node: DockerfileNode, antipatterns):
    """Recursively check for antipatterns in the Dockerfile AST."""
    matches = []
    
    for antipattern in antipatterns:
        # print(antipattern)
        if not "isRegexOfForm" in antipattern:
            if node.instruction == antipattern['instruction'] and antipattern['args'] in node.args:
                add_antipatterns(node,antipattern, matches)
        else:
            # isRegexOfForm is specified
            if not antipattern["isRegexOfForm"]:
                match = re.search(antipattern['args'], node.args)
                # isRegexOfForm is false - not specified - and a match is not found in the regex.
                if node.instruction == antipattern['instruction'] and not match:
                    add_antipatterns(node,antipattern, matches)
            # else:
            #     if not (node.instruction == antipattern['instruction'] and antipattern['args'] in node.args):
            #         append_to_antipattern_list(node,antipattern, matches, error_descriptions)

    for child in node.children:
        matches.extend(check_antipatterns(child, antipatterns))
    return matches

def output_vulnerabilities(dockerfilename,dockerfile_ast, baseImageScan,isVerbose):

    # TODO: Change this absolute path.
    error_descriptions = load_json('/Users/mehmetustek/localDocs/Thesis/Thesis-Project/dissertation/project/dockerfileVulnerability/antipattern_descriptions.json')
    patterns = load_json('/Users/mehmetustek/localDocs/Thesis/Thesis-Project/dissertation/project/dockerfileVulnerability/pattern_data.json')

    # Checking for vulnerabilities
    
    vulnerabilities = check_for_vulnerabilities(dockerfile_ast, patterns, baseImageScan)

    if isVerbose:
        # Initiate the logger.
        logger = logger_with_custom_formatter(file_path=dockerfilename)

        for vulnerability in vulnerabilities:
            vulnerability_detail = fetch_vulnerability_detail(error_descriptions=error_descriptions, lineNo=vulnerability.get("lineNo"), errorNo=vulnerability.get("errorNo"), custom_error_message=vulnerability.get("customErrorMessage"))
            print_severity(logger, vulnerability["severity"], vulnerability_detail)
    
    return vulnerabilities

def get_dockerfile_vulnerabilities(dockerfile_path, baseImageScan = False, isVerbose=True):
    # Parsing the Dockerfile
    dockerfile_ast = parse_dockerfile(dockerfile_path)
    # Load the Error and Pattern Files.
    return output_vulnerabilities(dockerfilename=dockerfile_path,dockerfile_ast=dockerfile_ast, baseImageScan=baseImageScan, isVerbose=isVerbose)
    
def get_dockerfile_vulnerabilities_filecontent(fileContent, baseImageScan = False, isVerbose=True):
    # Parsing the Dockerfile
    dockerfile_ast = parse_dockerfile_from_file_content(fileContent)
    # Load the Error and Pattern Files.
    return output_vulnerabilities(dockerfilename=fileContent,dockerfile_ast=dockerfile_ast, baseImageScan=baseImageScan, isVerbose=isVerbose)
    


# Path to the Dockerfile
# dockerfile_path = './Dockerfile'
# get_dockerfile_vulnerabilities(dockerfile_path)
