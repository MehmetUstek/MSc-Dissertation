import re
from typing import List
from dockerfileVulnerability.parse_dockerfile import parse_dockerfile
from dockerfileVulnerability.dockerfile_node import DockerfileNode
from utils.logs.custom_formatter import logger_with_custom_formatter
from utils.logs.severity_printer import print_severity
from utils.load_json import load_json
from dockerfileVulnerability.outsource_image_vulnerability_scan import outsource_image_vulnerability_scan as image_vulnerability_scan


def check_for_vulnerabilities(node: DockerfileNode, patterns, error_descriptions, baseImageScan):
    matches = []
    # Base conditions
    if not node.globalUser:
        matches.append(["Antipattern found: Container runs as root since there is no USER directive.",10])
    elif not node.is_user_added(node.globalUser):
        matches.append([f"Antipattern found: {error_descriptions['25']}",8])
    elif not node.get_group_from_user(node.globalUser):
        matches.append([f"Antipattern found: {error_descriptions['26']}",8])
    # Antipattern Scan
    matches.extend(check_antipatterns(node, patterns,error_descriptions))
    # Base Image Scan
    if baseImageScan:
        matches.extend(image_vulnerability_scan(node.FROM))

    return matches


def append_to_antipattern_list(node, antipattern,matches, error_descriptions):
    if not 'user' in antipattern:
        matches.append([f"Antipattern found: on line {node.lineNo}: {error_descriptions[str(antipattern['errorNo'])]}", antipattern["severity"]])
    elif antipattern['user'] is False and node.user == '': # Check for user not defined vulnerabilities
        matches.append([f"Antipattern found: on line {node.lineNo}: {error_descriptions[str(antipattern['errorNo'])]}", antipattern["severity"]])

    
def check_antipatterns(node: DockerfileNode, antipatterns, error_descriptions):
    """Recursively check for antipatterns in the Dockerfile AST."""
    matches = []
    
    for antipattern in antipatterns:
        # print(antipattern)
        if not "isRegexOfForm" in antipattern:
            if node.instruction == antipattern['instruction'] and antipattern['args'] in node.args:
                append_to_antipattern_list(node,antipattern, matches, error_descriptions)
        else:
            # isRegexOfForm is specified
            if not antipattern["isRegexOfForm"]:
                match = re.search(antipattern['args'], node.args)
                # isRegexOfForm is false - not specified - and a match is not found in the regex.
                if node.instruction == antipattern['instruction'] and not match:
                    append_to_antipattern_list(node,antipattern, matches, error_descriptions)
            # else:
            #     if not (node.instruction == antipattern['instruction'] and antipattern['args'] in node.args):
            #         append_to_antipattern_list(node,antipattern, matches, error_descriptions)

    for child in node.children:
        matches.extend(check_antipatterns(child, antipatterns,error_descriptions))
    return matches


def get_dockerfile_vulnerabilities(dockerfile_path,baseImageScan = False):
    # Initiate the logger.
    logger = logger_with_custom_formatter(dockerfile_path=dockerfile_path)
    # Parsing the Dockerfile
    dockerfile_ast = parse_dockerfile(dockerfile_path)
    # Load the Error and Pattern Files.
    error_descriptions = load_json('dockerfileVulnerability/antipattern_descriptions.json')
    patterns = load_json('dockerfileVulnerability/pattern_data.json')

    # Checking for vulnerabilities
    
    vulnerabilities = check_for_vulnerabilities(dockerfile_ast, patterns, error_descriptions, baseImageScan)
    for vulnerability, severity in vulnerabilities:
        print_severity(logger, severity, vulnerability)


# Path to the Dockerfile
# dockerfile_path = './Dockerfile'
# get_dockerfile_vulnerabilities(dockerfile_path)



